# 출결 관리 자동 캡처 프로그램

## 📚 참고 문서
개발 시 다음 문서들을 참고하세요:
- `docs/requirements.md`: 프로젝트 요구사항 명세서
- `docs/rules.md`: 개발 규칙 (필수 준수!)
- `docs/architecture.md`: 기술 설계서
- `docs/tasks.md`: 작업 목록

## 🔧 코딩 규칙 (docs/rules.md 기반)

### 네이밍
- **파일명**: `snake_case.py`
- **클래스명**: `PascalCase`
- **함수/메서드명**: `snake_case` (동사로 시작)
- **변수명**: `snake_case`
- **상수명**: `UPPER_SNAKE_CASE`

### 필수 사항
- **Docstring**: 모든 클래스와 함수에 필수
- **Type Hints**: 모든 함수 시그니처에 필수
- **에러 처리**: 모든 외부 호출에 try-except 사용

### 코드 제약
- 함수 길이: 최대 50줄
- 클래스 길이: 최대 500줄
- 줄 길이: 최대 120자

### Import 순서
1. 표준 라이브러리
2. 외부 라이브러리
3. 내부 모듈

### 파일 I/O
- `pathlib.Path` 사용 (문자열 경로 조합 금지)
- `with` 문 사용
- UTF-8-BOM 인코딩 (CSV)

### 에러 처리 패턴
```python
try:
    result = risky_operation()
except SpecificError as e:
    logger.error(f"작업 실패: {e}")
    raise
```

## 🐍 Python
- **버전**: Python 3.10.11 고정
- **가상환경**: conda 사용

## 📁 프로젝트 구조
```
capture/
├─ features/     # 핵심 비즈니스 로직
├─ gui/          # GUI (tkinter)
└─ utils/        # 유틸리티
```

## 📦 주요 라이브러리
- tkinter (GUI)
- mss (화면 캡처)
- Pillow (이미지 처리)
- numpy (배열 처리)
- insightface (얼굴 감지)
- onnxruntime-gpu (GPU 가속)

## 🔀 Git 관리 규칙

### 커밋 원칙
- **사용자 확인**: AI는 커밋 메시지와 명령어만 제안, 실제 커밋은 사용자가 직접 수행
- **파일별 분리**: 서로 다른 기능을 담당하는 파일은 별도 커밋으로 분리
- **단일 책임**: 하나의 커밋은 하나의 기능/수정사항만 포함

### 커밋 메시지 형식
```
<type>: <subject>

<body> (선택사항)
```

**Type 종류:**
- `feat`: 새 기능 추가
- `fix`: 버그 수정
- `docs`: 문서 수정
- `style`: 코드 포맷팅
- `refactor`: 리팩토링
- `test`: 테스트 추가/수정
- `chore`: 기타 (빌드, 설정 등)

### 파일별 커밋 예시
```bash
# ✅ 좋은 예: 파일별 분리
git add utils/monitor.py
git commit -m "feat: 모니터 조회 함수 구현"

git add gui/dialogs.py
git commit -m "feat: 모니터 선택 UI 추가"

# ❌ 나쁜 예: 여러 파일 한번에
git add utils/monitor.py gui/dialogs.py
git commit -m "feat: 모니터 기능 구현"
```

### AI 작업 후 Git 프로세스
1. AI는 코드 작성 후 **커밋 메시지와 명령어만 제안**
2. 사용자가 코드 확인 후 직접 커밋 실행
3. 파일이 여러 개인 경우 **파일별로 커밋 명령어 분리 제공**